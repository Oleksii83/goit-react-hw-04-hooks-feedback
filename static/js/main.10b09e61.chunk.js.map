{"version":3,"sources":["Component/feedbackOtions/FeedbackOptions.js","Component/Statistics/FeedbackStatistics.js","Component/Section title/SectionTitle.js","Component/Notfication/Notification.js","Component/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["Controls","onClickGood","onClickNeutral","onClickBad","className","type","id","onClick","Statistics","stateGood","stateNeutral","stateBad","stateTotal","PositiveFeedback","Section","title","children","Notification","message","Feedback","state","good","neutral","bad","visible","clickGood","setState","prevState","clickNeutral","clickBad","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAgBeA,EAdE,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,eAAgBC,EAAhC,EAAgCA,WAAhC,OACf,sBAAKC,UAAU,0BAAf,UACE,wBAAQC,KAAK,SAASC,GAAG,IAAIF,UAAU,iBAAiBG,QAASN,EAAjE,kBAGA,wBAAQI,KAAK,SAASC,GAAG,IAAIF,UAAU,iBAAiBG,QAASL,EAAjE,qBAGA,wBAAQG,KAAK,SAASC,GAAG,IAAIF,UAAU,iBAAiBG,QAASJ,EAAjE,qBCIWK,G,MAZI,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,SAAUC,EAAtC,EAAsCA,WAAYC,EAAlD,EAAkDA,iBAAlD,OACjB,qBAAKT,UAAU,4BAAf,SACE,qBAAIA,UAAU,wBAAd,UACE,qBAAIA,UAAU,wBAAd,oBAA8CK,EAA9C,OACA,qBAAIL,UAAU,wBAAd,uBAAiDM,KACjD,qBAAIN,UAAU,wBAAd,mBAA6CO,KAC7C,qBAAIP,UAAU,wBAAd,qBAA+CQ,KAC/C,qBAAIR,UAAU,wBAAd,iCAA2DS,EAA3D,c,MCGSC,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,0BAASZ,UAAU,UAAnB,UACGW,GAAS,oBAAIX,UAAU,gBAAd,SAA+BW,IACxCC,MCDQC,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,oBAAId,UAAU,gBAAd,SAA+Bc,KCiEzBC,E,4MA5DbC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,SAAS,G,EAGXC,UAAY,WACV,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BN,KAAMM,EAAUN,KAAO,O,EAI3BO,aAAe,WACb,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAC1BL,QAASK,EAAUL,QAAU,O,EAIjCO,SAAW,WACT,EAAKH,UAAS,SAAAC,GAAS,MAAK,CAC1BJ,IAAKI,EAAUJ,IAAM,O,EAIzBO,mBAAqB,WACnB,OAAO,EAAKV,MAAMC,KAAO,EAAKD,MAAME,QAAU,EAAKF,MAAMG,K,EAG3DQ,gCAAkC,WAChC,OAAOC,KAAKC,MAAyB,IAAlB,EAAKb,MAAMC,KAAc,EAAKS,uB,4CAGnD,WACE,OACE,0BAAS1B,UAAU,WAAnB,UACE,cAAC,EAAD,CAASW,MAAO,0BAChB,cAAC,EAAD,CACEd,YAAaiC,KAAKT,UAClBvB,eAAgBgC,KAAKN,aACrBzB,WAAY+B,KAAKL,WAGnB,cAAC,EAAD,CAASd,MAAO,cACe,IAA9BmB,KAAKJ,qBACJ,cAAC,EAAD,CACErB,UAAWyB,KAAKd,MAAMC,KACtBX,aAAcwB,KAAKd,MAAME,QACzBX,SAAUuB,KAAKd,MAAMG,IACrBX,WAAYsB,KAAKJ,qBACjBjB,iBAAkBqB,KAAKH,oCAGzB,cAAC,EAAD,CAAcb,QAAS,6B,GAtDViB,IAAMC,WCJd,SAASC,IACtB,OACE,mCACE,cAAC,EAAD,MCNN,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.10b09e61.chunk.js","sourcesContent":["import React from 'react';\n\nconst Controls = ({ onClickGood, onClickNeutral, onClickBad }) => (\n  <div className=\"FeedbackButtonContainer\">\n    <button type=\"button\" id=\"1\" className=\"FeedbackButton\" onClick={onClickGood}>\n      Good\n    </button>\n    <button type=\"button\" id=\"2\" className=\"FeedbackButton\" onClick={onClickNeutral}>\n      Neutral\n    </button>\n    <button type=\"button\" id=\"3\" className=\"FeedbackButton\" onClick={onClickBad}>\n      Bad\n    </button>\n  </div>\n);\n\nexport default Controls;\n","import React from 'react';\n\nconst Statistics = ({ stateGood, stateNeutral, stateBad, stateTotal, PositiveFeedback }) => (\n  <div className=\"FeedbackStatisticSynopsis\">\n    <ul className=\"FeedbackStatisticList\">\n      <li className=\"FeedbackStatisticItem\"> Good: {stateGood} </li>\n      <li className=\"FeedbackStatisticItem\"> Neutral: {stateNeutral}</li>\n      <li className=\"FeedbackStatisticItem\"> Bad: {stateBad}</li>\n      <li className=\"FeedbackStatisticItem\"> Total: {stateTotal}</li>\n      <li className=\"FeedbackStatisticItem\"> Positive feedback: {PositiveFeedback}%</li>\n    </ul>\n  </div>\n);\n\nexport default Statistics;\n","import React from 'react';\nimport './Section.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className=\"section\">\n      {title && <h2 className=\"FeedbackTitle\">{title}</h2>}\n      {children}\n    </section>\n  );\n}\n\nexport default Section;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  return <h2 className=\"FeedbackTitle\">{message}</h2>;\n};\n\nexport default Notification;\n","import React from 'react';\nimport Options from '../feedbackOtions/FeedbackOptions';\nimport './Feedback.css';\nimport Statistics from '../Statistics/FeedbackStatistics';\nimport Section from '../Section title/SectionTitle';\nimport Notification from '../Notfication/Notification';\n\nclass Feedback extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    visible: false,\n  };\n\n  clickGood = () => {\n    this.setState(prevState => ({\n      good: prevState.good + 1,\n    }));\n  };\n\n  clickNeutral = () => {\n    this.setState(prevState => ({\n      neutral: prevState.neutral + 1,\n    }));\n  };\n\n  clickBad = () => {\n    this.setState(prevState => ({\n      bad: prevState.bad + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good * 100) / this.countTotalFeedback());\n  };\n\n  render() {\n    return (\n      <section className=\"Feedback\">\n        <Section title={'Please Leave feedback'} />\n        <Options\n          onClickGood={this.clickGood}\n          onClickNeutral={this.clickNeutral}\n          onClickBad={this.clickBad}\n        />\n\n        <Section title={'Statistic'} />\n        {this.countTotalFeedback() !== 0 ? (\n          <Statistics\n            stateGood={this.state.good}\n            stateNeutral={this.state.neutral}\n            stateBad={this.state.bad}\n            stateTotal={this.countTotalFeedback()}\n            PositiveFeedback={this.countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message={'No feedback given'} />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default Feedback;\n","import './App.css';\nimport Feedback from './Component/Feedback/Feedback';\n\nexport default function App() {\n  return (\n    <>\n      <Feedback />\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}